{
  "AWSTemplateFormatVersion": "2010-09-09",



  "Resources": {

    "DevVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.12.0.0/23",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "Dev-VPC-${AWS::StackName}"
            }
          }
        ]
      }
    },


    "DevSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "DevVPC",
      "Properties": {
        "VpcId": {"Ref": "DevVPC"},
        "AvailabilityZone": {"Fn::Select":["0",{"Fn::GetAZs": {"Ref":"AWS::Region"}}]},
        "CidrBlock": "10.12.0.0/24",
        "MapPublicIpOnLaunch": "True"
      }
    },


    "DevSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "DevVPC",
      "Properties": {
        "VpcId": {"Ref": "DevVPC"},
        "AvailabilityZone": {"Fn::Select":["0",{"Fn::GetAZs": {"Ref":"AWS::Region"}}]},
        "CidrBlock": "10.12.1.0/24",
        "MapPublicIpOnLaunch": "True"
      }
    },

    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "DevVPC"}
      }
    },

    "RTableAss1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTable"},
        "SubnetId": {"Ref": "DevSubnet1"}
      }
    },

    "RTableAss2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTable"},
        "SubnetId": {"Ref": "DevSubnet2"}
      }
    },

    "NetAcl1": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "DevVPC"}
      }
    },

    "NetAclEntryEgress": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetAcl1"},
        "CidrBlock": "0.0.0.0/0",
        "Egress": "True",
        "Protocol": "-1",
        "RuleAction": "Allow",
        "RuleNumber": "100"
      }
    },


    "NetAclEntryIngress": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetAcl1"},
        "CidrBlock": "0.0.0.0/0",
        "Egress": "False",
        "Protocol": "-1",
        "RuleAction": "Allow",
        "RuleNumber": "100"
      }
    },

    "AclAssoc1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "DevSubnet1"},
        "NetworkAclId": {"Ref": "NetAcl1"}
      }
    },

    "AclAssoc2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "DevSubnet2"},
        "NetworkAclId": {"Ref": "NetAcl1"}
      }
    },

    "NatGateway1": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId" : {"Fn::GetAtt" : ["EIP1", "AllocationId"]},
        "SubnetId" : { "Ref" : "DevSubnet1"}

      }
    },

    "NatGateway2": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId" : {"Fn::GetAtt" : ["EIP2", "AllocationId"]},
        "SubnetId" : { "Ref" : "DevSubnet2"}

      }
    },

    "Route1" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NatGateway1" }
      }
    },

    "Route2" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NatGateway2" }
      }
    },

    "EIP1" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },

    "EIP2" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },

    "SecGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {"Fn::Sub": "Dev-VPC-SG-${AWS::StackName}"},
        "GroupDescription": "Test VPC Sec group",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "ToPort": "22",
            "IpProtocol": "tcp"
          },
          {
            "SourceSecurityGroupId": {"Ref": "ELBSecGroup"},
            "FromPort": "80",
            "ToPort": "80",
            "IpProtocol": "tcp"
          }
        ],
        "VpcId": {"Ref": "DevVPC"},
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub":"Dev-VPC-SG-${AWS::StackName}"}
          }
        ]
      }
    },

    "ELBSecGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {"Fn::Sub": "Dev-ELB-SG-${AWS::StackName}"},
        "GroupDescription": "Sec group for ELB",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "ToPort": "80",
            "IpProtocol": "tcp"
          }
        ],
        "VpcId": {"Ref": "DevVPC"},
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": "Dev-ELB-SG-${AWS::StackName}"}
          }
        ]
      }
    },


    "LaunchConfig": {
        "Type" : "AWS::AutoScaling::LaunchConfiguration",
        "Properties" : {
          "AssociatePublicIpAddress" : "True",
          "BlockDeviceMappings" : [],
          "IamInstanceProfile" : {"Ref":"InstanceProf"},
          "ImageId" : {"Ref": "AmiId"},
          "InstanceMonitoring" : "False",
          "InstanceType" : {"Ref":"InstanceType"},
          "KeyName" : {"Ref":"SSHKey"},
          "SecurityGroups" : [{"Ref":"SecurityGroup"}],
          "UserData": {
            "Fn::Base64":{"Fn::Join":["",[
              "#!/bin/bash\n",
              "yum -y install nginx\n",
              "service nginx restart\n"
            ]]}
          }
        }
      },

      "ASGroup": {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "AvailabilityZones" : [{"Ref":"AZ"}],
          "Cooldown" : "600",
          "DesiredCapacity" : "2",
          "HealthCheckType" : "ELB",
          "HealthCheckGracePeriod": "180",
          "LaunchConfigurationName" : {"Ref":"LaunchConfig"},
          "LoadBalancerNames" : [{"Ref":"ELB"}],
          "MaxSize" : "10",
          "MinSize" : "2",
          "Tags" : [
            {
              "Key": "Name",
              "Value": {"Fn::Sub": "${AWS::StackName}-ASG"},
              "PropagateAtLaunch": "True"
            }
          ],
          "VPCZoneIdentifier" : [{"Ref":"SubnetId"}]
        }
      },

      "ELB": {
        "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties": {
          "AppCookieStickinessPolicy" : [
            {
              "CookieName" : "ELBStickness",
              "PolicyName" : "Dev-ELB-Policy"
            }
          ],
          "ConnectionSettings" : {
            "IdleTimeout" : "60"
          },
          "CrossZone" : "False",
          "HealthCheck" : {
            "HealthyThreshold" : "5",
            "Interval" : "10",
            "Target" : "HTTP:80/",
            "Timeout" : "5",
            "UnhealthyThreshold" : "5"
          },
          "LoadBalancerName" : "Application-ELB",
          "Listeners" : [
            {
              "InstancePort" : "80",
              "InstanceProtocol" : "HTTP",
              "LoadBalancerPort" : "80",
              "Protocol" : "HTTP"
            }
          ],
          "Policies" : [],
          "Scheme" : "",
          "SecurityGroups" : [{"Ref":"ELBSecurityGroup"}],
          "Subnets" : [{"Ref":"SubnetId"}]
        }
      }



  },

  "Outputs": {
    "VpcId": {
      "Value": {"Ref": "DevVPC"}
    },

    "SubnetId1": {
      "Value": {"Ref": "DevSubnet1"}
    },

    "SubnetId2": {
      "Value": {"Ref": "DevSubnet2"}
    },

    "SecurityGroupId": {
      "Value": {"Ref": "SecGroup"}
    },

    "ELBSecurityGroupId": {
      "Value": {"Ref": "ELBSecGroup"}
    },

    "SubnetAZ": {
      "Value": {"Fn::GetAtt":["DevSubnet1", "AvailabilityZone"]}
    },

    "SubnetAZ2": {
      "Value": {"Fn::GetAtt":["DevSubnet2", "AvailabilityZone"]}
    }

    "ELBPublicIP": {
        "Description": "Public IP of the EC2 instance.",
        "Value": {"Fn::GetAtt":["ELB", "DNSName"]}
    },

    "SiteURL": {
      "Description": "URL of the site.",
      "Value": {
        "Fn::Join":["/", ["http:/",{"Fn::GetAtt":["ELB", "DNSName"]}]]
        }
      }
    }


}